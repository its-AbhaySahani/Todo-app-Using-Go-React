// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const addTeamMember = `-- name: AddTeamMember :exec

INSERT INTO team_members (team_id, user_id, is_admin)
VALUES (?, ?, ?)
`

type AddTeamMemberParams struct {
	TeamID  string
	UserID  string
	IsAdmin sql.NullBool
}

// Team Members Queries
func (q *Queries) AddTeamMember(ctx context.Context, arg AddTeamMemberParams) error {
	_, err := q.db.ExecContext(ctx, addTeamMember, arg.TeamID, arg.UserID, arg.IsAdmin)
	return err
}

const createSharedTodo = `-- name: CreateSharedTodo :exec

INSERT INTO shared_todos (id, task, description, done, important, user_id, date, time, shared_by)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateSharedTodoParams struct {
	ID          string
	Task        sql.NullString
	Description sql.NullString
	Done        sql.NullBool
	Important   sql.NullBool
	UserID      sql.NullString
	Date        sql.NullTime
	Time        sql.NullTime
	SharedBy    sql.NullString
}

// Shared Todos Queries
func (q *Queries) CreateSharedTodo(ctx context.Context, arg CreateSharedTodoParams) error {
	_, err := q.db.ExecContext(ctx, createSharedTodo,
		arg.ID,
		arg.Task,
		arg.Description,
		arg.Done,
		arg.Important,
		arg.UserID,
		arg.Date,
		arg.Time,
		arg.SharedBy,
	)
	return err
}

const createTeam = `-- name: CreateTeam :exec

INSERT INTO teams (id, name, password, admin_id)
VALUES (?, ?, ?, ?)
`

type CreateTeamParams struct {
	ID       string
	Name     string
	Password string
	AdminID  string
}

// Teams Queries
func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) error {
	_, err := q.db.ExecContext(ctx, createTeam,
		arg.ID,
		arg.Name,
		arg.Password,
		arg.AdminID,
	)
	return err
}

const createTeamTodo = `-- name: CreateTeamTodo :exec

INSERT INTO team_todos (id, task, description, done, important, team_id, assigned_to, date, time)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateTeamTodoParams struct {
	ID          string
	Task        string
	Description sql.NullString
	Done        bool
	Important   sql.NullBool
	TeamID      string
	AssignedTo  sql.NullString
	Date        sql.NullTime
	Time        sql.NullTime
}

// Team Todos Queries
func (q *Queries) CreateTeamTodo(ctx context.Context, arg CreateTeamTodoParams) error {
	_, err := q.db.ExecContext(ctx, createTeamTodo,
		arg.ID,
		arg.Task,
		arg.Description,
		arg.Done,
		arg.Important,
		arg.TeamID,
		arg.AssignedTo,
		arg.Date,
		arg.Time,
	)
	return err
}

const createTodo = `-- name: CreateTodo :exec

INSERT INTO todos (id, task, description, done, important, user_id, date, time)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateTodoParams struct {
	ID          string
	Task        string
	Description sql.NullString
	Done        bool
	Important   bool
	UserID      sql.NullString
	Date        sql.NullTime
	Time        sql.NullTime
}

// Todos Queries
func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) error {
	_, err := q.db.ExecContext(ctx, createTodo,
		arg.ID,
		arg.Task,
		arg.Description,
		arg.Done,
		arg.Important,
		arg.UserID,
		arg.Date,
		arg.Time,
	)
	return err
}

const createUser = `-- name: CreateUser :exec

INSERT INTO users (id, username, password)
VALUES (?, ?, ?)
`

type CreateUserParams struct {
	ID       string
	Username string
	Password string
}

// Users Queries
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.ID, arg.Username, arg.Password)
	return err
}

const deleteTeamTodo = `-- name: DeleteTeamTodo :exec
DELETE FROM team_todos
WHERE id = ? AND team_id = ?
`

type DeleteTeamTodoParams struct {
	ID     string
	TeamID string
}

func (q *Queries) DeleteTeamTodo(ctx context.Context, arg DeleteTeamTodoParams) error {
	_, err := q.db.ExecContext(ctx, deleteTeamTodo, arg.ID, arg.TeamID)
	return err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = ? AND user_id = ?
`

type DeleteTodoParams struct {
	ID     string
	UserID sql.NullString
}

func (q *Queries) DeleteTodo(ctx context.Context, arg DeleteTodoParams) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, arg.ID, arg.UserID)
	return err
}

const getSharedByMeTodos = `-- name: GetSharedByMeTodos :many
SELECT id, task, description, done, important, user_id, date, time, shared_by
FROM shared_todos
WHERE shared_by = ?
`

func (q *Queries) GetSharedByMeTodos(ctx context.Context, sharedBy sql.NullString) ([]SharedTodo, error) {
	rows, err := q.db.QueryContext(ctx, getSharedByMeTodos, sharedBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SharedTodo
	for rows.Next() {
		var i SharedTodo
		if err := rows.Scan(
			&i.ID,
			&i.Task,
			&i.Description,
			&i.Done,
			&i.Important,
			&i.UserID,
			&i.Date,
			&i.Time,
			&i.SharedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSharedTodos = `-- name: GetSharedTodos :many
SELECT id, task, description, done, important, user_id, date, time, shared_by
FROM shared_todos
WHERE user_id = ?
`

func (q *Queries) GetSharedTodos(ctx context.Context, userID sql.NullString) ([]SharedTodo, error) {
	rows, err := q.db.QueryContext(ctx, getSharedTodos, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SharedTodo
	for rows.Next() {
		var i SharedTodo
		if err := rows.Scan(
			&i.ID,
			&i.Task,
			&i.Description,
			&i.Done,
			&i.Important,
			&i.UserID,
			&i.Date,
			&i.Time,
			&i.SharedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamByID = `-- name: GetTeamByID :one
SELECT id, name, password, admin_id
FROM teams
WHERE id = ?
`

func (q *Queries) GetTeamByID(ctx context.Context, id string) (Team, error) {
	row := q.db.QueryRowContext(ctx, getTeamByID, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.AdminID,
	)
	return i, err
}

const getTeamMembers = `-- name: GetTeamMembers :many
SELECT team_id, user_id, is_admin
FROM team_members
WHERE team_id = ?
`

func (q *Queries) GetTeamMembers(ctx context.Context, teamID string) ([]TeamMember, error) {
	rows, err := q.db.QueryContext(ctx, getTeamMembers, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamMember
	for rows.Next() {
		var i TeamMember
		if err := rows.Scan(&i.TeamID, &i.UserID, &i.IsAdmin); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamTodos = `-- name: GetTeamTodos :many
SELECT id, task, description, done, important, team_id, assigned_to, date, time
FROM team_todos
WHERE team_id = ?
`

func (q *Queries) GetTeamTodos(ctx context.Context, teamID string) ([]TeamTodo, error) {
	rows, err := q.db.QueryContext(ctx, getTeamTodos, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamTodo
	for rows.Next() {
		var i TeamTodo
		if err := rows.Scan(
			&i.ID,
			&i.Task,
			&i.Description,
			&i.Done,
			&i.Important,
			&i.TeamID,
			&i.AssignedTo,
			&i.Date,
			&i.Time,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamsByAdminID = `-- name: GetTeamsByAdminID :many
SELECT id, name, password, admin_id
FROM teams
WHERE admin_id = ?
`

func (q *Queries) GetTeamsByAdminID(ctx context.Context, adminID string) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, getTeamsByAdminID, adminID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Password,
			&i.AdminID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTodosByUserID = `-- name: GetTodosByUserID :many
SELECT id, task, description, done, important, user_id, date, time
FROM todos
WHERE user_id = ?
`

func (q *Queries) GetTodosByUserID(ctx context.Context, userID sql.NullString) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getTodosByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Task,
			&i.Description,
			&i.Done,
			&i.Important,
			&i.UserID,
			&i.Date,
			&i.Time,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password
FROM users
WHERE username = ?
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}

const joinTeam = `-- name: JoinTeam :exec
INSERT INTO team_members (team_id, user_id, is_admin)
SELECT id, ?, false
FROM teams
WHERE name = ? AND password = ?
`

type JoinTeamParams struct {
	UserID   string
	Name     string
	Password string
}

func (q *Queries) JoinTeam(ctx context.Context, arg JoinTeamParams) error {
	_, err := q.db.ExecContext(ctx, joinTeam, arg.UserID, arg.Name, arg.Password)
	return err
}

const removeTeamMember = `-- name: RemoveTeamMember :exec
DELETE FROM team_members
WHERE team_id = ? AND user_id = ?
`

type RemoveTeamMemberParams struct {
	TeamID string
	UserID string
}

func (q *Queries) RemoveTeamMember(ctx context.Context, arg RemoveTeamMemberParams) error {
	_, err := q.db.ExecContext(ctx, removeTeamMember, arg.TeamID, arg.UserID)
	return err
}

const shareTodoWithUser = `-- name: ShareTodoWithUser :exec
INSERT INTO shared_todos (id, task, description, done, important, user_id, date, time, shared_by)
SELECT ?, task, description, done, important, (SELECT id FROM users WHERE username = ?), date, time, ?
FROM todos
WHERE todos.id = ?
`

type ShareTodoWithUserParams struct {
	ID       string
	Username string
	SharedBy sql.NullString
	ID_2     string
}

func (q *Queries) ShareTodoWithUser(ctx context.Context, arg ShareTodoWithUserParams) error {
	_, err := q.db.ExecContext(ctx, shareTodoWithUser,
		arg.ID,
		arg.Username,
		arg.SharedBy,
		arg.ID_2,
	)
	return err
}

const undoTodo = `-- name: UndoTodo :exec
UPDATE todos
SET done = false
WHERE id = ? AND user_id = ?
`

type UndoTodoParams struct {
	ID     string
	UserID sql.NullString
}

func (q *Queries) UndoTodo(ctx context.Context, arg UndoTodoParams) error {
	_, err := q.db.ExecContext(ctx, undoTodo, arg.ID, arg.UserID)
	return err
}

const updateTeamTodo = `-- name: UpdateTeamTodo :exec
UPDATE team_todos
SET task = ?, description = ?, done = ?, important = ?, assigned_to = ?
WHERE id = ? AND team_id = ?
`

type UpdateTeamTodoParams struct {
	Task        string
	Description sql.NullString
	Done        bool
	Important   sql.NullBool
	AssignedTo  sql.NullString
	ID          string
	TeamID      string
}

func (q *Queries) UpdateTeamTodo(ctx context.Context, arg UpdateTeamTodoParams) error {
	_, err := q.db.ExecContext(ctx, updateTeamTodo,
		arg.Task,
		arg.Description,
		arg.Done,
		arg.Important,
		arg.AssignedTo,
		arg.ID,
		arg.TeamID,
	)
	return err
}

const updateTodo = `-- name: UpdateTodo :exec
UPDATE todos
SET task = ?, description = ?, done = ?, important = ?
WHERE id = ? AND user_id = ?
`

type UpdateTodoParams struct {
	Task        string
	Description sql.NullString
	Done        bool
	Important   bool
	ID          string
	UserID      sql.NullString
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.ExecContext(ctx, updateTodo,
		arg.Task,
		arg.Description,
		arg.Done,
		arg.Important,
		arg.ID,
		arg.UserID,
	)
	return err
}
