Connected to the database successfully
üîÑ Test database connected
=== RUN   TestRegister

RUNNING TEST: TestRegister
Testing user registration with username 'testuser'
Test data cleaned up
Sending registration request
Registration response: {ID:7fd282ea-6a49-4775-84d2-7bfb4eca98f5 Username:testuser Password:$2a$10$m2EIacifE8ZhsyJQqJ8gGu0713CEiJgjdV269zDKx2m3bEvQa05fG}
Username verified: testuser
User ID verified: 7fd282ea-6a49-4775-84d2-7bfb4eca98f5
Password is properly hashed
Registration test passed
--- PASS: TestRegister (0.07s)
=== RUN   TestLoginWithValidCredentials

RUNNING TEST: TestLoginWithValidCredentials
Testing login with valid credentials
Test data cleaned up
Test user created with ID: dca78584-ee5f-4003-8d6f-c35dfc157f6c
Sending login request with valid credentials
Status code verified: 200 (OK)
Login response: map[token:eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3R1c2VyIiwidXNlcl9pZCI6ImRjYTc4NTg0LWVlNWYtNDAwMy04ZDZmLWMzNWRmYzE1N2Y2YyIsImV4cCI6MTc0MDU3NDQ4M30.bVpjthF4Sd17W4-1rHGB2KDQM7exTHcZq_8EK4IESw0]
Token verified (length: 200 characters)
Token cookie found (expires: 2025-02-26 12:54:43 +0000 UTC)
Login with valid credentials test passed
--- PASS: TestLoginWithValidCredentials (0.14s)
=== RUN   TestLoginWithInvalidCredentials

RUNNING TEST: TestLoginWithInvalidCredentials
Testing login with invalid credentials (wrong password)
Test data cleaned up
Test user created with ID: 761a866b-21fb-4da8-9c89-68396fdf0bc2
Sending login request with wrong password
Status code verified: 401 (Unauthorized)
Error message: Invalid password

Login with invalid credentials test passed
--- PASS: TestLoginWithInvalidCredentials (0.13s)
=== RUN   TestLoginWithNonExistentUser

RUNNING TEST: TestLoginWithNonExistentUser
Testing login with non-existent user
Sending login request with non-existent user
Status code verified: 401 (Unauthorized)
Error message: User not found

Login with non-existent user test passed
--- PASS: TestLoginWithNonExistentUser (0.00s)
=== RUN   TestAuthMiddlewareWithValidToken

RUNNING TEST: TestAuthMiddlewareWithValidToken
Testing authentication middleware with valid token
Sending request with valid token
userID in context: test-user-id
Status code verified: 200 (OK)
Response body: protected
Auth middleware with valid token test passed
--- PASS: TestAuthMiddlewareWithValidToken (0.00s)
=== RUN   TestAuthMiddlewareWithInvalidToken

RUNNING TEST: TestAuthMiddlewareWithInvalidToken
Testing authentication middleware with invalid token
Sending request with invalid token
Status code verified: 400 (Bad Request)
Response body: Bad request

Auth middleware with invalid token test passed
--- PASS: TestAuthMiddlewareWithInvalidToken (0.00s)
=== RUN   TestAuthMiddlewareWithNoToken

RUNNING TEST: TestAuthMiddlewareWithNoToken
Testing authentication middleware with no token
Sending request with no token
Status code verified: 401 (Unauthorized)
Response body: Unauthorized

Auth middleware with no token test passed
--- PASS: TestAuthMiddlewareWithNoToken (0.00s)
=== RUN   TestShareTodo

RUNNING TEST: TestShareTodo
Testing sharing a todo with another user
Shared todos cleaned up
Recipient user cleaned up
Test user already exists with ID: todo-test-user-id
Created recipient user with ID: shared-recipient-user-id
Creating a todo to be shared
Created todo with ID: 64e41993-6ff8-4f45-8d8e-a3820f68b108 to be shared
Sending request to share todo
Todo was successfully shared
ShareTodo test passed
--- PASS: TestShareTodo (0.02s)
=== RUN   TestGetSharedTodos

RUNNING TEST: TestGetSharedTodos
Testing getting shared todos

RUNNING TEST: TestShareTodo
Testing sharing a todo with another user
Shared todos cleaned up
Recipient user cleaned up
Test user already exists with ID: todo-test-user-id
Created recipient user with ID: shared-recipient-user-id
Creating a todo to be shared
Created todo with ID: d2ae42ab-5f9f-40c1-b679-702fd49de427 to be shared
Sending request to share todo
Todo was successfully shared
ShareTodo test passed
Sending request to get shared todos (as recipient)
Recipient has 1 received shared todos
Sending request to get shared todos (as sender)
Sender has shared 1 todos
GetSharedTodos test passed
Shared todos cleaned up
Recipient user cleaned up
--- PASS: TestGetSharedTodos (0.04s)
=== RUN   TestGetTeamMembers
=== RUN   TestGetTeamMembers
    team_member_test.go:64: Failed to create test user, status: 500
--- FAIL: TestGetTeamMembers (0.07s)
=== RUN   TestAddTeamMember
=== RUN   TestAddTeamMember
    team_member_test.go:64: Failed to create test user, status: 500
--- FAIL: TestAddTeamMember (0.07s)
=== RUN   TestRemoveTeamMember
=== RUN   TestRemoveTeamMember
    team_member_test.go:64: Failed to create test user, status: 500
--- FAIL: TestRemoveTeamMember (0.07s)
=== RUN   TestCreateTeam

RUNNING TEST: TestCreateTeam
    team_member_test.go:64: Failed to create test user, status: 500
--- FAIL: TestCreateTeam (0.07s)
=== RUN   TestGetTeams

RUNNING TEST: TestGetTeams
    team_member_test.go:64: Failed to create test user, status: 500
--- FAIL: TestGetTeams (0.07s)
=== RUN   TestGetTeamDetails

RUNNING TEST: TestGetTeamDetails
    team_member_test.go:64: Failed to create test user, status: 500
--- FAIL: TestGetTeamDetails (0.07s)
=== RUN   TestJoinTeam

RUNNING TEST: TestJoinTeam
    team_member_test.go:64: Failed to create test user, status: 500
--- FAIL: TestJoinTeam (0.07s)
=== RUN   TestCreateTeamTodo

RUNNING TEST: TestCreateTeamTodo
    team_todo_test.go:87: Failed to create team: 404 page not found
    team_todo_test.go:143: Handler returned wrong status code: got 404 want 200. Body: 404 page not found
--- FAIL: TestCreateTeamTodo (0.00s)
=== RUN   TestGetTeamTodos

RUNNING TEST: TestGetTeamTodos
    team_todo_test.go:87: Failed to create team: 404 page not found
    team_todo_test.go:191: Warning: Failed to create team todo for get test: 404 page not found
    team_todo_test.go:211: Handler returned wrong status code: got 404 want 200, response: 404 page not found
--- FAIL: TestGetTeamTodos (0.00s)
=== RUN   TestUpdateTeamTodo

RUNNING TEST: TestUpdateTeamTodo
    team_todo_test.go:87: Failed to create team: 404 page not found
    team_todo_test.go:254: Failed to create todo for update test: 404 page not found
--- FAIL: TestUpdateTeamTodo (0.00s)
=== RUN   TestDeleteTeamTodo

RUNNING TEST: TestDeleteTeamTodo
    team_todo_test.go:87: Failed to create team: 404 page not found
    team_todo_test.go:322: Failed to create todo for delete test, continuing with test anyway
    team_todo_test.go:323: TestDeleteTeamTodo passed
--- PASS: TestDeleteTeamTodo (0.00s)
=== RUN   TestGetTodos

RUNNING TEST: TestGetTodos
Testing getting todos for the authenticated user
Test todos cleaned up
Error cleaning up test user: Error 1451 (23000): Cannot delete or update a parent row: a foreign key constraint fails (`Todo_app`.`team_members`, CONSTRAINT `team_members_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`))
Test user already exists with ID: todo-test-user-id
Sending request to get todos
Retrieved 0 todos
GetTodos test passed
--- PASS: TestGetTodos (0.01s)
=== RUN   TestCreateTodo

RUNNING TEST: TestCreateTodo
Testing creating a new todo
Test user already exists with ID: todo-test-user-id
Sending request to create todo
Todo created with ID: ca264f96-9c7a-4d72-bbb0-8ea26f69c44f
CreateTodo test passed
--- PASS: TestCreateTodo (0.01s)
=== RUN   TestUpdateTodo

RUNNING TEST: TestUpdateTodo
Testing updating an existing todo
Test user already exists with ID: todo-test-user-id
Sending request to update todo
UpdateTodo test passed
--- PASS: TestUpdateTodo (0.01s)
=== RUN   TestUndoTodo

RUNNING TEST: TestUndoTodo
Testing undoing a completed todo
Test user already exists with ID: todo-test-user-id
Sending request to undo todo
Todo was successfully marked as undone
UndoTodo test passed
--- PASS: TestUndoTodo (0.01s)
=== RUN   TestDeleteTodo

RUNNING TEST: TestDeleteTodo
Testing deleting a todo
Test user already exists with ID: todo-test-user-id
Sending request to delete todo
Todo was successfully deleted
DeleteTodo test passed
Test todos cleaned up
Error cleaning up test user: Error 1451 (23000): Cannot delete or update a parent row: a foreign key constraint fails (`Todo_app`.`team_members`, CONSTRAINT `team_members_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`))
--- PASS: TestDeleteTodo (0.01s)
FAIL

‚ùå SOME TESTS FAILED
FAIL	github.com/its-AbhaySahani/Todo-app-Using-Go-React/TestCases	0.923s
FAIL
